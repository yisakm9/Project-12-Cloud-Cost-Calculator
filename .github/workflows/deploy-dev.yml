# .github/workflows/terraform-deploy.yml

name: 'Terraform & Frontend CI/CD for Cloud Cost Calculator'

on:
  push:
    branches:
      - main
    paths:
      - 'dev/**'
      - 'frontend/public/**' # Also trigger on frontend changes
      - 'src/**' # Trigger on backend lambda changes as well
  pull_request:
    paths:
      - 'dev/**'
      - 'frontend/public/**'
      - 'src/**'

permissions:
  id-token: write # Required for OIDC
  contents: read
  pull-requests: write # Required for adding comments to PRs

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    env:
      TF_WORKING_DIR: 'dev'
      AWS_REGION: 'us-east-1' # Must be us-east-1 for billing
      # IMPORTANT: Update with your AWS Account ID and the Role name you created
      AWS_ROLE_ARN: arn:aws:iam::456202167790:role/githubaction

    # Define job outputs to be consumed by the deploy-frontend job
    outputs:
      bucket_name: ${{ steps.set-tf-outputs.outputs.bucket_name }}
      api_url: ${{ steps.set-tf-outputs.outputs.api_url }}

    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4

      - name: 'Configure AWS Credentials'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 'Setup Terraform'
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.13.1' # version for consistency

      - name: 'Terraform Format Check'
        id: fmt
        run: terraform fmt 
        working-directory: ${{ env.TF_WORKING_DIR }}
        continue-on-error: true

      - name: 'Terraform Init'
        id: init
        run: terraform init
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: 'Terraform Validate'
        id: validate
        run: terraform validate -no-color
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: 'Terraform Plan'
        id: plan
        run: terraform plan -no-color
        working-directory: ${{ env.TF_WORKING_DIR }}
        if: github.event_name == 'pull_request'

      - name: 'Add Plan to PR'
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: 'Terraform Apply'
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: 'Set Terraform Outputs'
        id: set-tf-outputs
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          # Use terraform output to get values and expose them to the job's outputs
          bucket_name=$(terraform output -raw s3_bucket_name)
          api_url=$(terraform output -raw api_endpoint_url)
          echo "bucket_name=$bucket_name" >> $GITHUB_OUTPUT
          echo "api_url=$api_url" >> $GITHUB_OUTPUT
        working-directory: ${{ env.TF_WORKING_DIR }}

  # --- JOB TO DEPLOY THE FRONTEND ---
  deploy-frontend:
    name: 'Deploy Frontend to S3'
    runs-on: ubuntu-latest
    needs: terraform # Depends on the terraform job succeeding
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    env:
      S3_BUCKET_NAME: ${{ needs.terraform.outputs.bucket_name }}
      API_ENDPOINT: ${{ needs.terraform.outputs.api_url }}
      AWS_REGION: 'us-east-1'
      # IMPORTANT: Update with your AWS Account ID and the Role name you created
      AWS_ROLE_ARN: arn:aws:iam::456202167790:role/githubaction

    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4

      - name: 'Configure AWS Credentials'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: 'Inject API Endpoint URL into JavaScript'
        run: |
          # Use sed to find and replace the placeholder with the actual API URL from the terraform job output
          sed -i "s|%%API_ENDPOINT%%|${{ env.API_ENDPOINT }}|g" frontend/public/script.js
          echo "API Endpoint injected into script.js"

      - name: 'Deploy static site to S3'
        run: |
          echo "Deploying to bucket: ${{ env.S3_BUCKET_NAME }}"
          aws s3 sync frontend/public/ s3://${{ env.S3_BUCKET_NAME }}/ --delete