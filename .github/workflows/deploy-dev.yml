# .github/workflows/terraform-deploy.yml

name: 'Terraform & Frontend CI/CD for Cloud Cost Calculator'

on:
  push:
    branches:
      - main
    
  pull_request:
    branches:
      - main

permissions:
  id-token: write # Required for OIDC
  contents: read
  pull-requests: write # Required for commenting on Pull Requests

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    env:
      TF_WORKING_DIR: 'dev'
      AWS_REGION: 'us-east-1'
      #  AWS Account ID and the Role name 
      AWS_ROLE_ARN: arn:aws:iam::456202167790:role/githubaction

    # Expose outputs to be used by other jobs in the workflow
    outputs:
      bucket_name: ${{ steps.set-tf-outputs.outputs.bucket_name }}
      api_url: ${{ steps.set-tf-outputs.outputs.api_url }}

    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4

      - name: 'Configure AWS Credentials'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 'Setup Terraform'
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.13.4' #  version for consistency

      - name: 'Setup TFLint'
        uses: terraform-linters/setup-tflint@v6
        with:
          tflint_version: latest

      - name: 'Run TFLint'
        run: tflint --recursive
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: 'Run Checkov Security Scan'
        uses: bridgecrewio/checkov-action@master
        with:
          directory: ${{ env.TF_WORKING_DIR }}
          framework: terraform
          # soft_fail: true allows the pipeline to continue while still reporting findings.
          # For  production pipeline, set this to 'false'.
          soft_fail: true

      - name: 'Terraform Init'
        id: initiation
        run: terraform init
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: 'Terraform Validate'
        id: validate
        run: terraform validate -no-color
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: 'Terraform Plan (for Pull Requests)'
        id: plan
        if: github.event_name == 'pull_request' || (github.ref == 'refs/heads/main' && github.event_name == 'push')
        run: terraform plan -no-color
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: 'Add Plan to PR Comment'
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Plan ðŸ“–\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: 'Terraform Apply (for Main Branch)'
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: 'Set Terraform Outputs'
        id: set-tf-outputs
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          bucket_name=$(terraform output -raw s3_bucket_name)
          api_url=$(terraform output -raw api_endpoint_url)
          echo "bucket_name=$bucket_name" >> $GITHUB_OUTPUT
          echo "api_url=$api_url" >> $GITHUB_OUTPUT
        working-directory: ${{ env.TF_WORKING_DIR }}

  deploy-frontend:
    name: 'Deploy Frontend to S3'
    runs-on: ubuntu-latest
    needs: terraform # Depends on the terraform job succeeding
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    env:
      S3_BUCKET_NAME: ${{ needs.terraform.outputs.bucket_name }}
      API_ENDPOINT: ${{ needs.terraform.outputs.api_url }}
      AWS_REGION: 'us-east-1'
      
      AWS_ROLE_ARN: arn:aws:iam::456202167790:role/githubaction

    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4

      - name: 'Configure AWS Credentials'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: 'Inject API Endpoint URL into JavaScript'
        run: |
          if [ -z "${{ env.API_ENDPOINT }}" ]; then
            echo "::error::FATAL: API_ENDPOINT variable is empty. Cannot proceed."
            exit 1
          fi
          sed -i "s|%%API_ENDPOINT%%|${{ env.API_ENDPOINT }}|g" frontend/public/script.js
          echo "API Endpoint injected successfully."

      - name: 'Deploy static site to S3 with Cache Busting'
        run: |
          echo "Deploying to bucket: ${{ env.S3_BUCKET_NAME }}"
          aws s3 sync frontend/public/ s3://${{ env.S3_BUCKET_NAME }}/ --delete \
            --cache-control "no-cache, no-store, must-revalidate"